diff --git a/.gn b/.gn
index 5b010cc8b014..b9a0a9918b22 100644
--- a/.gn
+++ b/.gn
@@ -64,6 +64,7 @@ default_args = {
 # "gn check" or "gn gen --check".
 no_check_targets = [
   # //chrome/*, https://crbug.com/949535
+  "demo/demo_mojo_browser_render_v8:*",
   "//chrome/browser/media/router/discovery:*",  # 4 errors
   "//chrome/browser/safe_browsing/android:*",  # 3 errors
   "//chrome/browser/safety_check/android:*",  # 3 errors
diff --git a/chrome/browser/BUILD.gn b/chrome/browser/BUILD.gn
index 9fedd8330743..5cf86f5ad570 100644
--- a/chrome/browser/BUILD.gn
+++ b/chrome/browser/BUILD.gn
@@ -1868,6 +1868,8 @@ static_library("browser") {
   ]
 
   public_deps = [
+    # 加入我们的依赖
+    "//demo/demo_mojo_browser_render_v8:browser",
     "//base",
     "//chrome/common",
     "//chrome/common:buildflags",
diff --git a/chrome/browser/chrome_content_browser_client_receiver_bindings.cc b/chrome/browser/chrome_content_browser_client_receiver_bindings.cc
index 5feac0c791c7..f82f8dcc8413 100644
--- a/chrome/browser/chrome_content_browser_client_receiver_bindings.cc
+++ b/chrome/browser/chrome_content_browser_client_receiver_bindings.cc
@@ -73,6 +73,8 @@
 #endif
 #endif
 
+#include "demo/demo_mojo_browser_render_v8/browser/receiver_register.h"
+
 namespace {
 
 // Helper method for ExposeInterfacesToRenderer() that checks the latest
@@ -134,6 +136,10 @@ void ChromeContentBrowserClient::ExposeInterfacesToRenderer(
     service_manager::BinderRegistry* registry,
     blink::AssociatedInterfaceRegistry* associated_registry,
     content::RenderProcessHost* render_process_host) {
+
+  // 注册我们的Receiver
+   demo::ReceiverRegister::RegisterAll(registry);
+
   // The CacheStatsRecorder is an associated binding, instead of a
   // non-associated one, because the sender (in the renderer process) posts the
   // message after a time delay, in order to rate limit. The association
diff --git a/chrome/renderer/BUILD.gn b/chrome/renderer/BUILD.gn
index cd4395923de7..7dc1cd30797b 100644
--- a/chrome/renderer/BUILD.gn
+++ b/chrome/renderer/BUILD.gn
@@ -145,6 +145,8 @@ static_library("renderer") {
   public_deps = [ "//components/contextual_search:buildflags" ]
 
   deps = [
+    #加入我们的依赖
+    "//demo/demo_mojo_browser_render_v8:render",
     "//base/allocator:buildflags",
     "//build:chromeos_buildflags",
     "//chrome:resources",
diff --git a/chrome/renderer/chrome_content_renderer_client.cc b/chrome/renderer/chrome_content_renderer_client.cc
index ceb29f83a9dc..5620d2671232 100644
--- a/chrome/renderer/chrome_content_renderer_client.cc
+++ b/chrome/renderer/chrome_content_renderer_client.cc
@@ -467,6 +467,10 @@ void ChromeContentRendererClient::ExposeInterfacesToBrowser(
 
 void ChromeContentRendererClient::RenderFrameCreated(
     content::RenderFrame* render_frame) {
+
+    // 创建Observer 并监听
+    new demo::DemoRenderFrameObserver(render_frame, this);
+
   ChromeRenderFrameObserver* render_frame_observer =
       new ChromeRenderFrameObserver(render_frame, web_cache_impl_.get());
   service_manager::BinderRegistry* registry = render_frame_observer->registry();
@@ -1635,3 +1639,25 @@ void ChromeContentRendererClient::DidSetUserAgent(
   printing::SetAgent(user_agent);
 #endif
 }
+
+
+void ChromeContentRendererClient::DidCreateScriptContext(
+    v8::Local<v8::Context> context,
+    content::RenderFrame* render_frame) {
+ 
+  if (!render_frame->IsMainFrame()) {
+    return;
+  }
+  v8::Isolate* current_isolate = v8::Isolate::GetCurrent();
+  v8::Isolate::Scope isolate_scope(current_isolate);
+  v8::HandleScope scope(current_isolate);
+  v8::Context::Scope context_scope(context);
+    
+  //这里注入我们所有的V8实现
+  demo::V8BindingsRegister::RegisterAll(current_isolate);
+}
+
+void ChromeContentRendererClient::WillReleaseScriptContext(
+    v8::Local<v8::Context> context,
+    content::RenderFrame* render_frame) {}
+
diff --git a/chrome/renderer/chrome_content_renderer_client.h b/chrome/renderer/chrome_content_renderer_client.h
index 4fb3926576c8..6412c7a0b472 100644
--- a/chrome/renderer/chrome_content_renderer_client.h
+++ b/chrome/renderer/chrome_content_renderer_client.h
@@ -43,6 +43,9 @@
 #include "chrome/common/plugin.mojom.h"
 #endif
 
+#include "demo/demo_mojo_browser_render_v8/render/render_frame_observer.h"
+#include "demo/demo_mojo_browser_render_v8/render/v8_bindings_register.h"
+
 class ChromeRenderThreadObserver;
 #if BUILDFLAG(ENABLE_PRINT_PREVIEW)
 class ChromePDFPrintClient;
@@ -79,7 +82,15 @@ class WebCacheImpl;
 
 class ChromeContentRendererClient
     : public content::ContentRendererClient,
-      public service_manager::LocalInterfaceProvider {
+      public service_manager::LocalInterfaceProvider,
+       public demo::DemoRenderFrameObserver::Delegate {
+
+ public:
+            	void DidCreateScriptContext(v8::Local<v8::Context> context,
+                              content::RenderFrame* render_frame) override;
+  		        void WillReleaseScriptContext(v8::Local<v8::Context> context,
+                                content::RenderFrame* render_frame) override;
+
  public:
   ChromeContentRendererClient();
   ~ChromeContentRendererClient() override;
